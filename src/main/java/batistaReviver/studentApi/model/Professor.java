package batistaReviver.studentApi.model;

import jakarta.persistence.*;
import java.util.HashSet;
import java.util.Set;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Represents a professor entity within the institution.
 *
 * <p>This class is a JPA entity mapped to the "professors" table. It encapsulates the personal,
 * contact, and academic information of a professor. The use of Lombok annotations
 * (@Getter, @Setter, @NoArgsConstructor, @AllArgsConstructor) automatically generates the
 * corresponding boilerplate code for getters, setters, and constructors, simplifying the class
 * definition.
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "professors")
public class Professor {

  /**
   * The unique identifier for the professor. This is the primary key, and its value is
   * automatically generated by the database using an identity strategy.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  /** The full name of the professor. This field is mandatory and cannot be null. */
  @Column(nullable = false)
  private String name;

  /**
   * The phone number of the professor. This field is mandatory and must be unique across all
   * professor records.
   */
  @Column(nullable = false, unique = true)
  private String phone;

  /** The email address of the professor. This field is mandatory and must be unique. */
  @Column(nullable = false, unique = true)
  private String email;

  /**
   * The unique institutional identification number for the professor (e.g., employee ID). This
   * field must be unique.
   */
  @Column(unique = true)
  private String register;

  /**
   * A set of {@link StudyClass} entities taught by this professor.
   *
   * <p>This establishes a one-to-many relationship, where one professor can teach many classes. The
   * relationship is managed by the {@code professor} field in the {@code StudyClass} entity.
   *
   * @code orphanRemoval = true}: If a StudyClass is removed from this set, it will be deleted from
   *     the database.
   * @code fetch = FetchType.LAZY}: The associated classes are loaded from the database only when
   *     they are explicitly accessed.
   */
  @OneToMany(mappedBy = "professor", orphanRemoval = true, fetch = FetchType.LAZY)
  private Set<StudyClass> studyClasses = new HashSet<>();

  /**
   * Constructs a new Professor with specified details, excluding the database-generated ID. This
   * constructor is useful for creating new professor instances before persisting them.
   *
   * @param name The full name of the professor.
   * @param phone The unique phone number of the professor.
   * @param email The unique email address of the professor.
   * @param register The unique institutional identification number.
   */
  public Professor(String name, String phone, String email, String register) {
    this.name = name;
    this.phone = phone;
    this.email = email;
    this.register = register;
  }
}
