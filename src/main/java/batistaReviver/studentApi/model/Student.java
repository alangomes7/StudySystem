package batistaReviver.studentApi.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.HashSet;
import java.util.Set;

/**
 * Represents a student enrolled in the institution.
 *
 * This entity is mapped to the "students" table in the database. It contains personal
 * and contact information for a student, along with their unique registration number.
 * It also tracks the student's subscriptions to various classes.
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "students")
public class Student {

    /**
     * The unique identifier for the student.
     * This value is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The full name of the student.
     * This field cannot be null.
     */
    @Column(nullable = false)
    private String name;

    /**
     * The phone number of the student.
     * This field must be unique and cannot be null.
     */
    @Column(nullable = false, unique = true)
    private String phone;

    /**
     * The email address of the student.
     * This field must be unique and cannot be null.
     */
    @Column(nullable = false, unique = true)
    private String email;

    /**
     * The unique registration number for the student.
     */
    @Column(nullable = false, unique = true)
    private String registrationNumber;

    /**
     * The set of subscriptions this student has to different classes.
     * This establishes a one-to-many relationship with the Subscription entity.
     */
    @OneToMany(mappedBy = "student", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private Set<Subscription> subscriptions = new HashSet<>();

    /**
     * Constructs a new Student instance without an ID.
     * This is useful for creating new student records before they are persisted.
     *
     * @param name The student's full name.
     * @param phone The student's phone number.
     * @param email The student's email address.
     * @param registrationNumber The student's registration number.
     */
    public Student(String name, String phone, String email, String registrationNumber) {
        this.name = name;
        this.phone = phone;
        this.email = email;
        this.registrationNumber = registrationNumber;
    }
}
